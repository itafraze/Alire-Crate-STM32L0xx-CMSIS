@@----------------------------------------------------------------------------
@@--  Copyright (C) 2024, Emanuele Zarfati
@@--
@@--  Licensed under the Apache License, Version 2.0 (the "License");
@@--  you may not use this file except in compliance with the License.
@@--  You may obtain a copy of the License at
@@--
@@--      http://www.apache.org/licenses/LICENSE-2.0
@@--
@@--  Unless required by applicable law or agreed to in writing, software
@@--  distributed under the License is distributed on an "AS IS" BASIS,
@@--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@--  See the License for the specific language governing permissions and
@@--  limitations under the License.
@@--
@@----------------------------------------------------------------------------
@@--
@@--  Loosely inspired by files
@@--    CMSIS_5:Device/ARM/ARMCM0plus/Source/GCC/gcc_arm.ld
@@--    Output of './arm-eabi-ld --verbose'
@@--    startup-gen:share/startup-gen/resources/armvX-m.ld.tmplt
@@--
@@--  Revision History:
@@--    2024.01 E. Zarfati
@@--       - First version
@@--
@@----------------------------------------------------------------------------

/*----------------------------------------------------------------------------
   Linker script automatically generated by AdaCore's startup-gen
   based on template file link.ld.tmplt
----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
  Constants
----------------------------------------------------------------------------*/
@@IF@@ @_BOOT_FROM_ROM_@

__@_BOOT_MEM_@_BASE = @_BOOT_MEM_ADDR_@;
__@_BOOT_MEM_@_LEN = @_BOOT_MEM_SIZE_@;
@@END_IF@@
@@TABLE@@

__@_ROM_REGION_@_BASE = @_ROM_ADDR_@;
__@_ROM_REGION_@_LEN = @_ROM_SIZE_@;
@@END_TABLE@@
@@IF@@ not @_BOOT_FROM_ROM_@

__@_BOOT_MEM_@_BASE = @_BOOT_MEM_ADDR_@;
__@_BOOT_MEM_@_LEN = @_BOOT_MEM_SIZE_@;
@@END_IF@@
@@IF@@ @_MAIN_RAM_@ /= @_BOOT_MEM_@

__@_MAIN_RAM_@_BASE = @_MAIN_RAM_ADDR_@;
__@_MAIN_RAM_@_LEN = @_MAIN_RAM_SIZE_@;
@@END_IF@@
@@TABLE@@

__@_RAM_REGION_@_BASE = @_RAM_ADDR_@;
__@_RAM_REGION_@_LEN = @_RAM_SIZE_@;
@@END_TABLE@@

/*----------------------------------------------------------------------------
  Memories
----------------------------------------------------------------------------*/

/*  Boot memory: @_BOOT_MEM_@  */
MEMORY
{
   /*  ROM memories  */
@@IF@@ @_BOOT_FROM_ROM_@
   @_BOOT_MEM_@ (rx) : ORIGIN = __@_BOOT_MEM_@_BASE, LENGTH = __@_BOOT_MEM_@_LEN
@@END_IF@@
@@TABLE@@
   @_ROM_REGION_@ (rx) : ORIGIN = __@_ROM_REGION_@_BASE, LENGTH = __@_ROM_REGION_@_LEN
@@END_TABLE@@

   /*  RAM memories  */
@@IF@@ not @_BOOT_FROM_ROM_@
   @_BOOT_MEM_@ (rwx) : ORIGIN = __@_BOOT_MEM_@_BASE, LENGTH = __@_BOOT_MEM_@_LEN
@@END_IF@@
@@IF@@ @_MAIN_RAM_@ /= @_BOOT_MEM_@
   @_MAIN_RAM_@ (rwx) : ORIGIN = __@_MAIN_RAM_@_BASE, LENGTH = __@_MAIN_RAM_@_LEN
@@END_IF@@
@@TABLE@@
   @_RAM_REGION_@ (rwx) : ORIGIN = __@_RAM_REGION_@_BASE, LENGTH = __@_RAM_REGION_@_LEN
@@END_TABLE@@
}

/*----------------------------------------------------------------------------
  Sections
----------------------------------------------------------------------------*/

ENTRY(Reset_Handler)

/*
   @_BOOT_MEM_@
*/
SECTIONS
{
   .isr_vector __@_BOOT_MEM_@_BASE :
   {
      KEEP(*(.isr_vector))
   } > @_BOOT_MEM_@

   .text :
   {
      . = ALIGN(4);
      _stext = .;

      *(.text*)
      . = ALIGN(4);
      KEEP(*(.init))
      . = ALIGN(4);
      *(.rodata*)

      . = ALIGN(4);
      _etext = .;
   } > @_BOOT_MEM_@
   _wtext = (_etext - _stext) >> 2;
}

/*
   @_MAIN_RAM_@
 */
SECTIONS
{
   .data :
   {
      . = ALIGN(4);
      _sdata = .;

      *(.data*)

      . = ALIGN(4);
      _edata = .;
   } > @_MAIN_RAM_@ AT> @_BOOT_MEM_@
   _wdata = (_edata - _sdata) >> 2;
   _ldata = LOADADDR(.data);

   .bss (NOLOAD) :
   {
      . = ALIGN(4);
      _sbss = .;

      *(.bss*)

      . = ALIGN(4);
      _ebss = .;
   } > @_MAIN_RAM_@
   _wbss = (_ebss - _sbss) >> 2;

   .heap (NOLOAD) :
   {
      . = ALIGN(4);
      _sheap = .;

      . = ALIGN(4);
      _eheap = .;
   } > @_MAIN_RAM_@
   _wheap = (_eheap - _sheap) >> 2;

   .stack (NOLOAD) :
   {
      . = ALIGN(4);
      _sstack = .;

      . = ORIGIN(@_MAIN_RAM_@) + LENGTH(@_MAIN_RAM_@);
      _estack = .;
   } > @_MAIN_RAM_@
   _wstack = (_estack - _sstack) >> 2;
}

/*
   EEPROM
 */
SECTIONS
{
   .eeprom :
   {
      . = ALIGN(4);
      _seeprom = .;

      *(.eeprom*)

      . = ALIGN(4);
      _eeeprom = .;
   } > EEPROM
   _weeprom = (_eeeprom - _seeprom) >> 2;
}
