@@----------------------------------------------------------------------------
@@--  Copyright 2024, Emanuele Zarfati
@@--
@@--  Licensed under the Apache License, Version 2.0 (the "License");
@@--  you may not use this file except in compliance with the License.
@@--  You may obtain a copy of the License at
@@--
@@--      http://www.apache.org/licenses/LICENSE-2.0
@@--
@@--  Unless required by applicable law or agreed to in writing, software
@@--  distributed under the License is distributed on an "AS IS" BASIS,
@@--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@--  See the License for the specific language governing permissions and
@@--  limitations under the License.
@@--
@@----------------------------------------------------------------------------
@@--
@@--  Loosely inspired by files
@@--    CMSIS_5:Device/ARM/ARMCM0plus/Source/GCC/startup_ARMCM0plus.S
@@--    cmsis_device_l0:Source/Templates/gcc/startup_stm32l011xx.s
@@--    startup-gen:share/startup-gen/resources/armvX-m.S.tmplt
@@--
@@--  Revision History:
@@--    2024.01 E. Zarfati
@@--       - First version
@@--       - Strictly require linking to Cmsis_Device_System_Init
@@--
@@----------------------------------------------------------------------------

/*----------------------------------------------------------------------------
  Start-up routine automatically generated by AdaCore's startup-gen
  based on template file crt0.S.tmplt
----------------------------------------------------------------------------*/

   .syntax unified
   .cpu cortex-m0plus
   .fpu softvfp
   .thumb

/*----------------------------------------------------------------------------
  Global declarations
----------------------------------------------------------------------------*/

   .global __vectors
   .global Reset_Handler

/*----------------------------------------------------------------------------
  Interrupts vector table
----------------------------------------------------------------------------*/

   .section .isr_vector,"a",%progbits
   .type __vectors, %object
   .align   2
__vectors:
   /*  Implemented Cortex-M0+ core interrupts. Reserved  */
   .word  _estack            /*  Top of Stack  */
   .word  Reset_Handler      /*  Reset  */
   .word  NMI_Handler        /*  Non Maskable Interrupt  */
   .word  HardFault_Handler  /*  Hard Fault  */
   .word  0                  /*  Reserved in STM32L0's Cortex-M0+  */
   .word  0                  /*  Reserved in STM32L0's Cortex-M0+  */
   .word  0                  /*  Reserved in STM32L0's Cortex-M0+  */
   .word  0                  /*  Reserved in STM32L0's Cortex-M0+  */
   .word  0                  /*  Reserved in STM32L0's Cortex-M0+  */
   .word  0                  /*  Reserved in STM32L0's Cortex-M0+  */
   .word  0                  /*  Reserved in STM32L0's Cortex-M0+  */
   .word  SVC_Handler        /*  SVCall  */
   .word  0                  /*  Reserved in STM32L0's Cortex-M0+  */
   .word  0                  /*  Reserved in STM32L0's Cortex-M0+  */
   .word  PendSV_Handler     /*  PendSV  */
   .word  SysTick_Handler    /*  SysTick  */

   /*  MCU interrupts  */
@@TABLE@@
   .word @_INTERRUPT_NAME_@_Handler /* @_INTERRUPT_ID_@ */
@@END_TABLE@@

   .size __vectors, . - __vectors

//----------------------------------------------------------------------------
//  Weak aliases for each exception and interrupt handler
//----------------------------------------------------------------------------

   /*  Cortex-M0+ core exceptions handlers  */
   .weak      NMI_Handler
   .thumb_set NMI_Handler,Default_Exception_Handler
   .weak      HardFault_Handler
   .thumb_set HardFault_Handler,Default_Exception_Handler
   .weak      SVC_Handler
   .thumb_set SVC_Handler,Default_Exception_Handler
   .weak      PendSV_Handler
   .thumb_set PendSV_Handler,Default_Exception_Handler
   .weak      SysTick_Handler
   .thumb_set SysTick_Handler,Default_Exception_Handler

   /*  MCU interrupt handlers  */
@@TABLE@@
@@IF@@ @_INTERRUPT_NAME_@ /= unknown_interrupt
   .weak      @_INTERRUPT_NAME_@_Handler
   .thumb_set @_INTERRUPT_NAME_@_Handler,Default_Interrupt_Handler
@@END_IF@@
@@END_TABLE@@
   .weak      unknown_interrupt_Handler
   .thumb_set unknown_interrupt_Handler,Default_Interrupt_Handler

/*----------------------------------------------------------------------------
  Handlers
----------------------------------------------------------------------------*/

   /*  Reset_Handler
    *  Executed upon uP reset
    */
   .text
   .type Reset_Handler,%function
   .thumb_func
   .align 2
Reset_Handler:

   /*  Set the stack pointer  */
   ldr   r0, =_estack
   mov   sp, r0

   /*  Copy content of section .data from FLASH to SRAM  */
   ldr   r0,=_ldata
   ldr   r1,=_sdata
   ldr   r2,=_wdata
   bl    __copy_words

   /*  Clear section .bss  */
   movs  r0,#0
   ldr   r1,=_sbss
   ldr   r2,=_wbss
   bl    __fill_words

   /*  Execute the system initialization procedure if it exists  */
   ldr   r0,=Cmsis_Device_System_Init
   cmp   r0,#0
   beq   __skip_cmsis_device_system_init
   blx    r0
__skip_cmsis_device_system_init:

   /*  Execute the libc initialization procedure if it exists  */
   .weak __libc_init_array
   ldr   r0,=__libc_init_array
   cmp   r0,#0
   beq   __skip_libc_init_array
   blx    r0
__skip_libc_init_array:

   /*  Initialise Ada  */
   .weak adainit
   ldr   r0,=adainit
   cmp   r0,#0
   beq   __skip_adainit
   blx    r0
__skip_adainit:

   /*  Jump to main if it is implemented, otherwise get stuck  */
   .weak main
   .thumb_set main, __infinite_loop
   bl    main

   /*  If this point is ever reached, restart  */
   b     Reset_Handler

   .size Reset_Handler, . - Reset_Handler

   /*  Default_Exception_Handler
    *  Executed upon ARM exception occurrence
    *  TODO Implement call to ADA function passing exception ID
    */
   .text
   .type Default_Exception_Handler,%function
   .thumb_func
   .align 2
Default_Exception_Handler:
   b     __infinite_loop

   /*  Default_Interrupt_Handler
    *  Executed upon ARM exception occurrence
    *  TODO Implement call to ADA function passing interrupt ID
    */
   .text
   .type Default_Interrupt_Handler,%function
   .thumb_func
   .align 2
Default_Interrupt_Handler:
   bx    lr

/*----------------------------------------------------------------------------
  Subroutines
----------------------------------------------------------------------------*/

   /*  __copy_words
    *  Copy continuous region by words (side effect on r0-r3)
    *     r0: source base address
    *     r1: destination base address
    *     r2: number of words
    */
   .text
   .type __copy_words,%function
   .thumb_func
   .align 2
__copy_words:
   cmp   r2,#0
   ble   __copy_words_return
   ldmia r0!,{r3}
   stmia r1!,{r3}
   subs  r2,r2,#1
   b     __copy_words
__copy_words_return:
   bx    lr
   .size __copy_words, . - __copy_words

   /*  __fill_words
    *  Fill continuous region by words (side effect on r1-r2)
    *     r0: fill value
    *     r1: destination base address
    *     r2: number of words
    */
   .text
   .type __fill_words,%function
   .thumb_func
   .align 2
__fill_words:
   cmp   r2,#0
   ble   __fill_words_return
   stmia r1!,{r0}
   subs   r2,r2,#1
   b     __fill_words
__fill_words_return:
   bx    lr
   .size __fill_words, . - __fill_words

   /*  __infinite_loop
    */
   .text
   .type __infinite_loop,%function
   .thumb_func
__infinite_loop:
   b     __infinite_loop
